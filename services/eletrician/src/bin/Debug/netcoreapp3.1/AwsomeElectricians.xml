<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AwsomeElectricians</name>
    </assembly>
    <members>
        <member name="T:AwsomeElectricians.Attributes.ValidateModelStateAttribute">
            <summary>
            Model state validation attribute
            </summary>
        </member>
        <member name="M:AwsomeElectricians.Attributes.ValidateModelStateAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Called before the action method is invoked
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:AwsomeElectricians.Controllers.ProjectApiController">
            <summary>
            
            </summary>
        </member>
        <member name="M:AwsomeElectricians.Controllers.ProjectApiController.NewProjectPOST(System.Nullable{System.Int32})">
            <summary>
            Request to start the project
            </summary>
            <remarks>In the event that a HRC decides AwsomeContructor as the winner, the HRC informs PlumberBrothersto start working on the project.</remarks>
            <param name="id">Id of the quotation request</param>
            <response code="200">ok</response>
            <response code="0">Exception happened!</response>
        </member>
        <member name="T:AwsomeElectricians.Controllers.RequestForQuotationApiController">
            <summary>
            
            </summary>
        </member>
        <member name="M:AwsomeElectricians.Controllers.RequestForQuotationApiController.DeleteRequestForQuotationIdDELETE(System.Nullable{System.Int32})">
            <summary>
            Recives a request for deleting the quotation request with specific id from a HRC company and responds whether the quoation was deleted or exception happened.
            </summary>
            <remarks>A HRC can sends a request for editing the request for quoation with specific id via this API. AwsomeElectricians return whether the request was deleted or exception happened.</remarks>
            <param name="id">Id of the quotation request</param>
            <response code="200">delete successfuly</response>
            <response code="404">Resource not found</response>
            <response code="0">Exception happened!</response>
        </member>
        <member name="M:AwsomeElectricians.Controllers.RequestForQuotationApiController.EditQuotationPUT(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal})">
            <summary>
            Recives a request for editing the quotation request with specific id from a HRC company and responds whether the request was submitted or not
            </summary>
            <remarks>A HRC can sends a request for editing the request for quoation with specific id  via this API. AwsomeElectricians return whether the request was submitted or an exception happened.</remarks>
            <param name="quotationRequestId">Id of the quotation request</param>
            <param name="address">Address of the property</param>
            <param name="startDate">Start Date</param>
            <param name="duration">Duration in days</param>
            <param name="budget">Max budget in Euroes</param>
            <response code="200">Changes applied successfuly</response>
            <response code="404">Resource not found</response>
            <response code="0">Exception happened!</response>
        </member>
        <member name="M:AwsomeElectricians.Controllers.RequestForQuotationApiController.NewQuotationRequestPOST(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal})">
            <summary>
            Recives a new request for quotation from a HRC company and responds whether the request was submitted or not
            </summary>
            <remarks>A HRC can sends a request for quoation via this API. AwsomeElectricians return whether the request was submitted or an exception happened.</remarks>
            <param name="address">Address of the property</param>
            <param name="startDate">Start Date</param>
            <param name="duration">Duration in days</param>
            <param name="budget">Max budget in Euroes</param>
            <response code="201">Request submitted successfuly.</response>
            <response code="0">Exception happened!</response>
        </member>
        <member name="T:AwsomeElectricians.Filters.BasePathFilter">
            <summary>
            BasePath Document Filter sets BasePath property of Swagger and removes it from the individual URL paths
            </summary>
        </member>
        <member name="M:AwsomeElectricians.Filters.BasePathFilter.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="basePath">BasePath to remove from Operations</param>
        </member>
        <member name="P:AwsomeElectricians.Filters.BasePathFilter.BasePath">
            <summary>
            Gets the BasePath of the Swagger Doc
            </summary>
            <returns>The BasePath of the Swagger Doc</returns>
        </member>
        <member name="M:AwsomeElectricians.Filters.BasePathFilter.Apply(Microsoft.OpenApi.Models.OpenApiDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
            Apply the filter
            </summary>
            <param name="swaggerDoc">OpenApiDocument</param>
            <param name="context">FilterContext</param>
        </member>
        <member name="T:AwsomeElectricians.Filters.GeneratePathParamsValidationFilter">
            <summary>
            Path Parameter Validation Rules Filter
            </summary>
        </member>
        <member name="M:AwsomeElectricians.Filters.GeneratePathParamsValidationFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Constructor
            </summary>
            <param name="operation">Operation</param>
            <param name="context">OperationFilterContext</param>
        </member>
        <member name="T:AwsomeElectricians.Models.Quotation">
            <summary>
            Model containg the quotation offered by the renovation company
            </summary>
        </member>
        <member name="P:AwsomeElectricians.Models.Quotation.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:AwsomeElectricians.Models.Quotation.ServicePrice">
            <summary>
            the price for the service
            </summary>
            <value>the price for the service</value>
        </member>
        <member name="P:AwsomeElectricians.Models.Quotation.Duration">
            <summary>
            duration in days
            </summary>
            <value>duration in days</value>
        </member>
        <member name="P:AwsomeElectricians.Models.Quotation.StartDate">
            <summary>
            the date that
            </summary>
            <value>the date that</value>
        </member>
        <member name="M:AwsomeElectricians.Models.Quotation.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:AwsomeElectricians.Models.Quotation.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:AwsomeElectricians.Models.Quotation.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:AwsomeElectricians.Models.Quotation.Equals(AwsomeElectricians.Models.Quotation)">
            <summary>
            Returns true if Quotation instances are equal
            </summary>
            <param name="other">Instance of Quotation to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:AwsomeElectricians.Models.Quotation.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:AwsomeElectricians.Program">
            <summary>
            Program
            </summary>
        </member>
        <member name="M:AwsomeElectricians.Program.Main(System.String[])">
            <summary>
            Main
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:AwsomeElectricians.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            Create the web host builder.
            </summary>
            <param name="args"></param>
            <returns>IWebHostBuilder</returns>
        </member>
        <member name="T:AwsomeElectricians.Startup">
            <summary>
            Startup
            </summary>
        </member>
        <member name="M:AwsomeElectricians.Startup.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="env"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:AwsomeElectricians.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:AwsomeElectricians.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="loggerFactory"></param>
        </member>
    </members>
</doc>
